[Infrastructure]
# The key-value storage for indexed features, currently only supports Redis.
KV_STORE = Redis
# The source for collecting repo information.
REPO_SOURCE = Github
# The database for open source software information.
OSS_DB = PostgreSQL
# The scheduler. No value means test locally. Celery queuing uses celery as the scheduler.
# For Celery queuing, the CELERY_BROKER_URL should be pointed to the rabbitmq broker address.
QUEUING = Celery

[PostgreSQL]
# The host of postgresql database. It can be localhost or your customized IP/domains.
DB_HOST = localhost
# The port of postgresql database.
DB_PORT = 5432
# The databases storing C/C++ OSS information.
NATIVE_DBS = [{"database_name": "github", "database_user": "osspolice", "database_password": "OSSPolicePassword", "table_name": "repositories"}]
# The databases storing Java OSS information.
JAVA_DBS = [{"database_name": "jcenter", "database_user": "osspolice", "database_password": "OSSPolicePassword", "table_name": "libs"}]

[Redis]
# The type of redis instances. It can be TCP_SOCKET or REDIS_CLUSTER.
TYPE = REDIS_CLUSTER
# The id of redis database being used. Defaults to 0.
DATABASE = 0
# If TYPE is TCP_SOCKET, the PORT option specifies the port that Redis runs on.
PORT = 6379
# If TYPE is TCP_SOCKET, the HOST option specifies the host that Redis runs on.
HOST = localhost

[RedisCluster]
# The following five attributes specifies hierarchical indexing database, version database and result database separately.
# The keys have been designed to have no conflict. So it is safe to share redis instances among them.
NATIVE_NODES = [{"host": "example.com", "port": "6000"}]
NATIVE_VERSION_NODES = [{"host": "example.com", "port": "6001"}]
JAVA_NODES = [{"host": "example.com", "port": "6002"}]
JAVA_VERSION_NODES = [{"host": "example.com", "port": "6003"}]
RESULT_NODES = [{"host": "example.com", "port": "6004"}]

[Celery]
# Broker URL for celery. Currently supports rabbitmq as broker.
CELERY_BROKER_URL = amqp://osspolice:OSSPolicePassword@example.com/osspolice
CELERY_RESULTS_BACKEND = rpc://
# Logging related parameters
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/worker_stats_
LOGFILE_PREFIX = /tmp/worker_
FAILURE_FILE = /tmp/java_sigs.failure
# Set readonly mode if the workers will *only* be used for searching. For boosting key-value lookup.
REDIS_READONLY_MODE = True
# Keep/Reuse generated features (signatures).
KEEP_SIG = True
REUSE_SIG = True
# Skip a repo or software if there is no signatures available.
SKIP_NO_SIG = False
# Dump the generated features in binary format.
BINARY_SIG = True
# Compress the generated features at storing time.
COMPRESS_SIG = True
# Directory to store C/C++ repo signatures.
REPO_SIG_DIR = /tmp/repo_sigs
# Directory to store Java artifact signatures.
JAVA_SIG_DIR = /tmp/java_sigs
# Directories to load Java artifact signatures from.
JAVA_SIG_LOAD_DIRS = ["/tmp/java_sigs", "/tmp/apps_sigs"]
# Directory to store apk extraction information (.components files).
COMP_SIG_DIR = /tmp/apps_comps
# Directory to load apk extraction information from.
COMP_SIG_LOAD_DIRS = ["/tmp/apps_comps"]
# Directory to load app protocol buffer description from. This is output of PlayDrone app crawler.
APP_PB_LOAD_DIRS = ["/tmp/apps_pb"]
# Features used in searching phase. str, funcname, func and var are supported in C/C++ search,
# strings, normclasses, centroids are supported in Java search.
SEARCH_FEATURES = ["str", "funcname", "func", "strings", "normclasses"]
# Directory to store crawling results or the search apk's extract results
RESULT_DIR = /tmp/results/
# Ignore already scanned repos/artifacts/apks.
IGNORE_SCANNED = True
# The timeout for clang-based features extractor.
LEXER_TIMEOUT = 90
# Scan source code for licenses at indexing phase.
SCAN_FILES_FOR_LICENSE = True
# The indexing configuration
INDEX_REPO_VERSIONS = True
# Clone and index submodules.
INDEX_SUBMODULES = False
# Index major versions of a repo/artifact. When enabled, frequency and time based filtering of versions are disabled.
INDEX_MAJOR_VERSIONS = True
# Index selected versions of a repo/artifact. Only enabled when INDEX_MAJOR_VERSIONS is disabled.
# Pick max 8 versions, 3 months apart and limit number of queries to GitHub API.
MAX_REPO_VERSIONS = 8
MIN_REPO_VERSIONS_DISTANCE = 3
MAX_REPO_TAGS_QUERY = 50
# Use zset or hset for feature counting job, and specify a file to exclude the common features.
FEATURE_KEY_TYPE = hset
COMMON_FEATURE_FILE = /tmp/common_features.csv

[Github]
REPO_URL_PROTOCOL = https
REPO_URL_HOSTNAME = github.com
REPO_CREDENTIALS_FILE = credentials.json
REPO_CLONE_TIMEOUT = 300
REPO_CLONE_RETRIES = 3
REPO_SUBMODULE_TIMEOUT = 300

[Indexing]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/index_stats_
LOGFILE_PREFIX = /tmp/index_
REPO_DIR = /data/repos
CONFIGURE_TIMEOUT = 300
LEXER_TIMEOUT = 90
SCAN_FILES_FOR_LICENSE = True
INDEX_REPO_VERSIONS = True
INDEX_SUBMODULES = False
# Index major versions of a repo/artifact. When enabled, frequency and time based filtering of versions are disabled.
INDEX_MAJOR_VERSIONS = True
# Index selected versions of a repo/artifact. Only enabled when INDEX_MAJOR_VERSIONS is disabled.
# Pick max 8 versions, 3 months apart and limit number of queries to GitHub API.
MAX_REPO_VERSIONS = 8
MAX_REPO_TAGS_QUERY = 2000
MIN_REPO_VERSIONS_DISTANCE = 3
KEEP_SIG = True
REUSE_SIG = True
BINARY_SIG = True
COMPRESS_SIG = True
REPO_SIG_DIR = /tmp/repo_sigs

[Searching]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/search_stats_
LOGFILE_PREFIX = /tmp/search_
IGNORE_SCANNED = False
SEARCH_FEATURES = ["str", "funcname", "func"]

[JavaIndexing]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/index_stats_
LOGFILE_PREFIX = /tmp/index_
REPO_DIR = /data/repos
KEEP_SIG = True
REUSE_SIG = True
BINARY_SIG = True
COMPRESS_SIG = True
JAVA_SIG_DIR = /tmp/java_index_sigs
JAVA_SIG_LOAD_DIRS = ["/tmp/java_index_sigs"]

[JavaSearching]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/search_stats_
LOGFILE_PREFIX = /tmp/search_
KEEP_SIG = True
REUSE_SIG = True
BINARY_SIG = True
COMPRESS_SIG = True
#IGNORE_SCANNED = True
JAVA_SIG_DIR = /tmp/java_search_sigs
JAVA_SIG_LOAD_DIRS = ["/tmp/java_index_sigs", "/tmp/java_search_sigs"]
SEARCH_FEATURES = ["strings", "normclasses"]

[JavaSignature]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/signature_stats_
LOGFILE_PREFIX = /tmp/signature_
KEEP_SIG = True
REUSE_SIG = True
BINARY_SIG = True
COMPRESS_SIG = True
EXCLUDE_FILE = /tmp/apps_sigs.done
FAILURE_FILE = /tmp/apps_sigs.failure
JAVA_SIG_DIR = /tmp/java_signature_sigs
JAVA_SIG_LOAD_DIRS = ["/tmp/java_signature_sigs"]

[ApkExtract]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/extract_stats_
LOGFILE_PREFIX = /tmp/extract_
RESULT_DIR = /tmp/apk_extractor/
IGNORE_SCANNED = True
REUSE_SIG = True

[ApkSearching]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/apk_search_stats_
LOGFILE_PREFIX = /tmp/apk_search_
IGNORE_SCANNED = True
JAVA_SIG_LOAD_DIRS = ["/tmp/apk_search_sigs"]
COMP_SIG_LOAD_DIRS = ["/tmp/apk_search_comps"]
EXCLUDE_FILE = /tmp/apk_search.done
FAILURE_FILE = /tmp/apk_search.failure

[Validate]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/validate_stats_
LOGFILE_PREFIX = /tmp/validate_
JAVA_SIG_LOAD_DIRS = ["/tmp/validate_sigs"]
COMP_SIG_LOAD_DIRS = ["/tmp/validate_comps"]
APP_PB_LOAD_DIRS = ["/tmp/apps_pb"]
IGNORE_SCANNED = True
IGNORE_DEVELOPER_WEBSITE = True

[FeatureCounting]
STATS = Enabled
STATS_LOGFILE_PREFIX = /tmp/count_stats_
LOGFILE_PREFIX = /tmp/count_
RESULT_DIR = /tmp/feature_count/
IGNORE_SCANNED = True
COMP_SIG_LOAD_DIRS = ["/tmp/apps_comps"]
# Use zset or hset for feature counting job, and specify a file to exclude the common features.
FEATURE_KEY_TYPE = hset
COMMON_FEATURE_FILE = /tmp/common_features.csv

[Dumping]
STATS = Disabled
STATS_LOGFILE_PREFIX = /tmp/dump_stats_
LOGFILE_PREFIX = /tmp/dump_

[Profiling]
PROFILING_ENABLED = False
PROFILE_DUMP_FILE_PREFIX = /tmp/worker_

[Algorithm]
# Test mode only dumps features.
TEST_MODE = Disabled
# Minimum length for strings.
MIN_STRING_LEN = 3
# Minimum percentage for matching nodes.
MIN_PERCENT_MATCH = {"native": 10.0, "java": 20.0}
# Maximum name distance to consider two repos as potentially the same one.
MAX_NAME_DISTANCE = 0.5
# Use MD5 result as 64 bit string.
USE_MD5_64BITS = 0
# Use MD5 result as integer.
USE_MD5_INT = 1
# use short strings as keys.
USE_SHORT_STRS_AS_KEYS = 0
# Minimum total size of C/CPP files to be considered when indexing (default 4KB)
MIN_SIZE_C_CPP_FILES = 4
# Maximum total size of C/CPP files to be considered when indexing (default 120MB)
MAX_SIZE_C_CPP_FILES = 122880
# Maximum number of parent nodes that a node can point to in hierarchical indexing table.
MAX_PER_STR_MATCHING_REPO_COUNT = 2000
# Use permission strings as feature in Java artifact indexing.
USE_PERMISSION_STRINGS = False
# Use redis pipeline when makking redis queries.
USE_REDIS_PIPELINE = True
# Use unique features as term frequency.
USE_UNIQ_FEATURES_FOR_TF = True
# Not implemented yet! Use #ifdef group information when indexing and matching. 
USE_IFDEF_GROUP = False
# Group the matched result by the majority set of matched features! This is for both Java and Native.
USE_GROUPED_RESULT = True
MAX_GROUPED_RESULT_SIMHASH_DISTANCE = 5
# Use grouped percent match and specify types of nodes to apply
USE_GROUPED_MATCH = True
GROUPED_NODE_TYPES = ["dir", "file", "dirs"]
# The minimum number of functions to match when considering a repo/branch
MIN_GROUPED_FUNCFREQ = 2
# The minimum matched percentage of a file/dir to be considered when matching a file in grouped mode
MIN_GROUPED_PERCENT_MATCH = 0.1
# The maximum refcnt ratio for a regular file/dir within a repo
MAX_GROUPED_REFCNT_RATIO = 2.0
# Either use simhash as node id algorithm or md5 as node id algorithm
NODE_ID_ALGORITHM = simhash
# Maximum distance between similar nodes
SIMHASH_DISTANCE = 5
# Aggregate the refcnt of similar nodes at search time, to capture popularity of third-party files!
#SEARCH_SIMHASH_DISTANCE = 5
# Propogate the refcnt from lower nodes to higher ones, only works at file/dir level!
SEARCH_REFCNT_PROPAGATION = True
#NODE_ID_ALGORITHM = md5
# Shuffle the input list
SHUFFLE_INPUT = True
MIN_MATCHING_REPO_FEATURE_COUNT = 50
MIN_LOW_LEVEL_MATCHING_SCORE = 0.2
MIN_MATCHING_SCORE = {"native": 0.4, "java": 0.5}
##########################################################################################
# Used only java searching
##########################################################################################
# Used for Centroid, according to the paper, 0.01 yields Method-level False Positive Rate (MFPR) < 1%, 0 yields MFPR < 0.38%
MAX_CENTROID_RESULT_COUNT = -1
# (1) 0.4 min-score vs. MDD 0  -->  doesn't use similarity of centroid
#MIN_MATCHING_SCORE = 0.4
#MAX_METHOD_DIFFERENCE_DEGREE = 0
# (2) 0.6 min-score vs. MDD 0.01 vs. USE_CENTROID_BIN = False  -->  use zset similarity of centroid
MAX_METHOD_DIFFERENCE_DEGREE = 0.01
USE_CENTROID_BIN = False
# (3) 0.5 min-score vs. MDD 0.01 vs. USE_CENTROID_BIN = True  -->  use hset bin similarity of centroid
#MIN_MATCHING_SCORE = 0.5
#MAX_METHOD_DIFFERENCE_DEGREE = 0.02
#USE_CENTROID_BIN = True
#USE_ONE_CENTROID_BIN_IN_INDEX = True
##########################################################################################
# Used for version pinpointing, using version specific unique features, for native, turn this off, for java, turn it on
##########################################################################################
USE_VERSION_DIFFERENCES = True
USE_VERSION_AS_FEATURE = False
# Search co-location features, should have this minimum match ratio (currently TFIDF based).
MIN_VERSION_PERCENT_MATCH = 0.7
